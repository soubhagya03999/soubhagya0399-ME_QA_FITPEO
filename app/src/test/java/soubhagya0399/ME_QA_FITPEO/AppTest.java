/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package soubhagya0399.ME_QA_FITPEO;

import org.testng.Assert;
import org.testng.annotations.*;

import soubhagya0399.ME_QA_FITPEO.Pages.Home;
import soubhagya0399.ME_QA_FITPEO.Pages.RevenueCalculatorPage;

import java.time.Duration;
import org.openqa.selenium.chrome.ChromeDriver;

/**
 * The AppTest class contains automated test cases for the Fitpeo website.
 */
public class AppTest {
    static ChromeDriver driver;

    /**
     * This method sets up the test environment before any tests are run.
     * It initializes the ChromeDriver, maximizes the browser window, and sets an implicit wait time.
     */
    @BeforeSuite(alwaysRun = true)
    public void openBrowser() {
        driver = new ChromeDriver();
        driver.manage().window().maximize();
        driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(30));
    }

    /**
     * This test case performs a series of actions on the Fitpeo Revenue Calculator page and validates the results.
     */
    @Test
    public void TestCase01() {
        try {
            // STEP-01: Navigate to the home page
            Home.navigateToHomePage(driver);
            
            // STEP-02: Navigate to the Revenue Calculator page
            RevenueCalculatorPage.navigateToRevenueCalculatorPage(driver);

            // STEP-03: Scroll to the Revenue Calculator slider
            RevenueCalculatorPage.ScrollUntilRevenueCalculatorSlider(driver);

            // STEP-04: Set the slider value to 820
            RevenueCalculatorPage.setSliderValueUsingActions(driver, 820);

            // STEP-05: Update the text field value to 560
            RevenueCalculatorPage.UpdateTextField(driver, 560);

            // STEP-06: Validate that the slider value is updated to 560
            Assert.assertTrue(RevenueCalculatorPage.ValidateSliderValue(driver, 560),
                    "TEST STEP FAILURE: Slider Value is not updated as expected");

            // ADDITIONAL STEP-01: Update the text field value to 820 for validation
            RevenueCalculatorPage.UpdateTextField(driver, 820);

            // STEP-07: Select the specified CPT codes
            RevenueCalculatorPage.SelectCPTCodes(driver, new String[]{"CPT-99091", "CPT-99453", "CPT-99454", "CPT-99474"});

            // STEP-08: Validate the total recurring reimbursement
            Assert.assertEquals(RevenueCalculatorPage.ValidateTotalRecurringReimbursement(driver), "$110700",
                    "TEST STEP FAILURE: Total Recurring Reimbursement for all Patients Per Month is not displayed as expected");
        } catch (Exception e) {
            // Handle any exceptions that occur during the test
            e.printStackTrace();
        }
    }

    /**
     * This method cleans up the test environment after all tests have run.
     * It closes the browser.
     */
    @AfterSuite(alwaysRun = true)
    public void closeBrowser() {
        driver.quit();
    }
}
